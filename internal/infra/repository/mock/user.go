// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/ports/user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	authdto "github.com/bubaew95/yandex-diploma/internal/core/dto/request/authdto"
	userrequest "github.com/bubaew95/yandex-diploma/internal/core/dto/request/userrequest"
	userentity "github.com/bubaew95/yandex-diploma/internal/core/entity/userentity"
	usermodel "github.com/bubaew95/yandex-diploma/internal/core/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Authorization mocks base method.
func (m *MockUserService) Authorization(ctx context.Context, s authdto.SignInRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", ctx, s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization.
func (mr *MockUserServiceMockRecorder) Authorization(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockUserService)(nil).Authorization), ctx, s)
}

// Balance mocks base method.
func (m *MockUserService) Balance(ctx context.Context) (usermodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", ctx)
	ret0, _ := ret[0].(usermodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockUserServiceMockRecorder) Balance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockUserService)(nil).Balance), ctx)
}

// BalanceWithdraw mocks base method.
func (m *MockUserService) BalanceWithdraw(ctx context.Context, ur userrequest.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceWithdraw", ctx, ur)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalanceWithdraw indicates an expected call of BalanceWithdraw.
func (mr *MockUserServiceMockRecorder) BalanceWithdraw(ctx, ur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceWithdraw", reflect.TypeOf((*MockUserService)(nil).BalanceWithdraw), ctx, ur)
}

// Registration mocks base method.
func (m *MockUserService) Registration(ctx context.Context, s authdto.SignUpRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockUserServiceMockRecorder) Registration(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockUserService)(nil).Registration), ctx, s)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepository) AddUser(ctx context.Context, s usermodel.UserRegistration) (userentity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, s)
	ret0, _ := ret[0].(userentity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryMockRecorder) AddUser(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), ctx, s)
}

// BalanceWithdraw mocks base method.
func (m *MockUserRepository) BalanceWithdraw(ctx context.Context, ur usermodel.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceWithdraw", ctx, ur)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalanceWithdraw indicates an expected call of BalanceWithdraw.
func (mr *MockUserRepositoryMockRecorder) BalanceWithdraw(ctx, ur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceWithdraw", reflect.TypeOf((*MockUserRepository)(nil).BalanceWithdraw), ctx, ur)
}

// FindUserByLoginAndPassword mocks base method.
func (m *MockUserRepository) FindUserByLoginAndPassword(ctx context.Context, s usermodel.UserLogin) (userentity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByLoginAndPassword", ctx, s)
	ret0, _ := ret[0].(userentity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByLoginAndPassword indicates an expected call of FindUserByLoginAndPassword.
func (mr *MockUserRepositoryMockRecorder) FindUserByLoginAndPassword(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByLoginAndPassword", reflect.TypeOf((*MockUserRepository)(nil).FindUserByLoginAndPassword), ctx, s)
}

// GetUserBalance mocks base method.
func (m *MockUserRepository) GetUserBalance(ctx context.Context, userID int64) (usermodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(usermodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockUserRepositoryMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockUserRepository)(nil).GetUserBalance), ctx, userID)
}
