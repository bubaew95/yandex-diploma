// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/ports/order.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	orderentity "github.com/bubaew95/yandex-diploma/internal/core/entity/orderentity"
	ordersmodel "github.com/bubaew95/yandex-diploma/internal/core/model/ordersmodel"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// AddOrdersNumber mocks base method.
func (m *MockOrderService) AddOrdersNumber(ctx context.Context, number string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrdersNumber", ctx, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrdersNumber indicates an expected call of AddOrdersNumber.
func (mr *MockOrderServiceMockRecorder) AddOrdersNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrdersNumber", reflect.TypeOf((*MockOrderService)(nil).AddOrdersNumber), ctx, number)
}

// OrdersByUserId mocks base method.
func (m *MockOrderService) OrdersByUserId(ctx context.Context) ([]ordersmodel.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersByUserId", ctx)
	ret0, _ := ret[0].([]ordersmodel.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByUserId indicates an expected call of OrdersByUserId.
func (mr *MockOrderServiceMockRecorder) OrdersByUserId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByUserId", reflect.TypeOf((*MockOrderService)(nil).OrdersByUserId), ctx)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrdersNumber mocks base method.
func (m *MockOrderRepository) AddOrdersNumber(ctx context.Context, order orderentity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrdersNumber", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrdersNumber indicates an expected call of AddOrdersNumber.
func (mr *MockOrderRepositoryMockRecorder) AddOrdersNumber(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrdersNumber", reflect.TypeOf((*MockOrderRepository)(nil).AddOrdersNumber), ctx, order)
}

// OrdersByUserId mocks base method.
func (m *MockOrderRepository) OrdersByUserId(ctx context.Context, userId int64) ([]ordersmodel.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersByUserId", ctx, userId)
	ret0, _ := ret[0].([]ordersmodel.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByUserId indicates an expected call of OrdersByUserId.
func (mr *MockOrderRepositoryMockRecorder) OrdersByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByUserId", reflect.TypeOf((*MockOrderRepository)(nil).OrdersByUserId), ctx, userId)
}
